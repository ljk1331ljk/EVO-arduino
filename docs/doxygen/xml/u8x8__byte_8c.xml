<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="u8x8__byte_8c" kind="file" language="C++">
    <compoundname>u8x8_byte.c</compoundname>
    <includes refid="u8x8_8h" local="yes">u8x8.h</includes>
    <incdepgraph>
      <node id="2">
        <label>u8x8.h</label>
        <link refid="u8x8_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/helper/U8g2/clib/u8x8_byte.c</label>
        <link refid="u8x8__byte_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="u8x8__byte_8c_1a70d415550fa3cf17f36f2e1bbf069b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_SetDC</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t dc)</argsstring>
        <name>u8x8_byte_SetDC</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="39" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a80e0a6948c585b773fc0816519546000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_SendBytes</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)</argsstring>
        <name>u8x8_byte_SendBytes</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="44" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1aecb342cd924f2f20031fd2d536e78e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_SendByte</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t byte)</argsstring>
        <name>u8x8_byte_SendByte</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="49" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1adb030c8c73a07bef68d498e0434fb2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_StartTransfer</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>u8x8_byte_StartTransfer</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="54" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1ac716374498b30a0b86c51ec13fbea6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_EndTransfer</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>u8x8_byte_EndTransfer</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="59" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1abd5677dbe4e409e515377e6a67fba323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_empty</definition>
        <argsstring>(U8X8_UNUSED u8x8_t *u8x8, uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)</argsstring>
        <name>u8x8_byte_empty</name>
        <param>
          <type>U8X8_UNUSED <ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>U8X8_UNUSED uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>U8X8_UNUSED void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="66" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="66" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a3424a1c2ab323306d7619fe0f983e571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_4wire_sw_spi</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_4wire_sw_spi</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="107" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="107" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a736474310b8b57c11f5310190a739c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_8bit_6800mode</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_8bit_6800mode</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="166" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="166" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1ac655c1c63aac230347616d63e2fad5ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_8bit_8080mode</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_8bit_8080mode</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="216" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="216" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a2a3b208d940ee14e8a2bb071cd9a5957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_3wire_sw_spi</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_3wire_sw_spi</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="268" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="268" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a90b4350c13798a1678897a756ed3dffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_byte_set_ks0108_cs</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t arg)</argsstring>
        <name>u8x8_byte_set_ks0108_cs</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="331" column="6" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="331" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a035035623b5cd1054a8f5d047519f3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_ks0108</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_ks0108</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="341" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="341" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a9b320b3c4ef49d225efa079572466ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_sed1520</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_sed1520</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="397" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="397" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a6c4212d071e31f948d32cad6f3656daf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_delay</definition>
        <argsstring>(u8x8_t *u8x8) U8X8_NOINLINE</argsstring>
        <name>i2c_delay</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="462" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="462" bodyend="466" declfile="src/helper/U8g2/clib/u8x8_byte.c" declline="461" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1ac7ba403872865f0b05eb2bab0710147f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_init</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_init</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="468" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="468" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1af248e314cee68373afe0009d30e9089e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_read_scl_and_delay</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_read_scl_and_delay</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="478" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="478" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1afc7f49655aec04b2653d7a902209310f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_clear_scl</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_clear_scl</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="486" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a350aa3d28416afe65ee9875dbffb9578" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_read_sda</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_read_sda</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="491" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="491" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1aa731d0a8321bea3da51222d543fd7321" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_clear_sda</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_clear_sda</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="497" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="497" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1aacf814066859d46bb81dfacd9d52de83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_start</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_start</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="503" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="503" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a70d1c0dba71b23feaeeafb754f1e35af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_stop</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_stop</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="521" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="521" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1ad47d11297925fcd91fa5cf714e1bc351" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_write_bit</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t val)</argsstring>
        <name>i2c_write_bit</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="536" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="536" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1a53772932c9c656063301abb6e9895944" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_read_bit</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>i2c_read_bit</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="548" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="548" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1acfd13dd95746bcb405551b565918287c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_write_byte</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t b)</argsstring>
        <name>i2c_write_byte</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="561" column="13" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="561" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__byte_8c_1ae22e25838cf8ad6a6502e5cb6c8ca699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_byte_sw_i2c</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)</argsstring>
        <name>u8x8_byte_sw_i2c</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>arg_int</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_byte.c" line="578" column="9" bodyfile="src/helper/U8g2/clib/u8x8_byte.c" bodystart="578" bodyend="613"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>u8x8_byte.c<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Universal<sp/>8bit<sp/>Graphics<sp/>Library<sp/>(https://github.com/olikraus/u8g2/)</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>olikraus@gmail.com</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.<sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;u8x8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">uint8_t<sp/>u8x8_byte_SetDC(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>dc)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8-&gt;byte_cb(u8x8,<sp/>U8X8_MSG_BYTE_SET_DC,<sp/>dc,<sp/>NULL);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">uint8_t<sp/>u8x8_byte_SendBytes(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>cnt,<sp/>uint8_t<sp/>*data)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8-&gt;byte_cb(u8x8,<sp/>U8X8_MSG_BYTE_SEND,<sp/>cnt,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)data);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">uint8_t<sp/>u8x8_byte_SendByte(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_byte_SendBytes(u8x8,<sp/>1,<sp/>&amp;</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">uint8_t<sp/>u8x8_byte_StartTransfer(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8-&gt;byte_cb(u8x8,<sp/>U8X8_MSG_BYTE_START_TRANSFER,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">uint8_t<sp/>u8x8_byte_EndTransfer(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8-&gt;byte_cb(u8x8,<sp/>U8X8_MSG_BYTE_END_TRANSFER,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">uint8_t<sp/>u8x8_byte_empty(U8X8_UNUSED<sp/>u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>U8X8_UNUSED<sp/>uint8_t<sp/>arg_int,<sp/>U8X8_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>always<sp/>succeed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/>Uses:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;sda_setup_time_ns</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;sck_pulse_width_ns</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;spi_mode</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;chip_disable_level</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;chip_enable_level</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>Calls<sp/>to<sp/>GPIO<sp/>and<sp/>DELAY:</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_DELAY_NANO</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_GPIO_DC</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_GPIO_CS</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_GPIO_CLOCK</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_GPIO_DATA</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>Handles:</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_BYTE_INIT</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_BYTE_SEND</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_BYTE_SET_DC</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_BYTE_START_TRANSFER</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>U8X8_MSG_BYTE_END_TRANSFER</highlight></codeline>
<codeline lineno="105"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">uint8_t<sp/>u8x8_byte_4wire_sw_spi(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>b;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>uint8_t<sp/>takeover_edge<sp/>=<sp/>u8x8_GetSPIClockPhase(u8x8);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>uint8_t<sp/>not_takeover_edge<sp/>=<sp/>1<sp/>-<sp/>takeover_edge;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&amp;<sp/>128<sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIData(u8x8,<sp/>1);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIData(u8x8,<sp/>0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIClock(u8x8,<sp/>not_takeover_edge);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;sda_setup_time_ns);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIClock(u8x8,<sp/>takeover_edge);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;sck_pulse_width_ns);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>chipselect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>wait<sp/>required<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>SPI:<sp/>setup<sp/>correct<sp/>level<sp/>of<sp/>the<sp/>clock<sp/>signal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIClock(u8x8,<sp/>u8x8_GetSPIClockPhase(u8x8));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetDC(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_enable_level);<sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">uint8_t<sp/>u8x8_byte_8bit_6800mode(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>b;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>U8X8_MSG_GPIO_D0;<sp/>i<sp/>&lt;=<sp/>U8X8_MSG_GPIO_D7;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>i,<sp/>b&amp;1);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;data_setup_time_ns);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;write_pulse_width_ns);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>chipselect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>that<sp/>the<sp/>enable<sp/>signal<sp/>is<sp/>high<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>0);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetDC(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_enable_level);<sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">uint8_t<sp/>u8x8_byte_8bit_8080mode(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>b;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>U8X8_MSG_GPIO_D0;<sp/>i<sp/>&lt;=<sp/>U8X8_MSG_GPIO_D7;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>i,<sp/>b&amp;1);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;data_setup_time_ns);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>0);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;write_pulse_width_ns);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>chipselect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>that<sp/>the<sp/>enable<sp/>signal<sp/>is<sp/>high<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetDC(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_enable_level);<sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">uint8_t<sp/>u8x8_byte_3wire_sw_spi(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>uint8_t<sp/>takeover_edge<sp/>=<sp/>u8x8_GetSPIClockPhase(u8x8);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>uint8_t<sp/>not_takeover_edge<sp/>=<sp/>1<sp/>-<sp/>takeover_edge;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>uint16_t<sp/>b;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>last_dc;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>last_dc<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>|=<sp/>256;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&amp;<sp/>256<sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIData(u8x8,<sp/>1);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIData(u8x8,<sp/>0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIClock(u8x8,<sp/>not_takeover_edge);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;sda_setup_time_ns);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIClock(u8x8,<sp/>takeover_edge);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;sck_pulse_width_ns);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>chipselect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>wait<sp/>required<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>SPI:<sp/>setup<sp/>correct<sp/>level<sp/>of<sp/>the<sp/>clock<sp/>signal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetSPIClock(u8x8,<sp/>u8x8_GetSPIClockPhase(u8x8));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_dc<sp/>=<sp/>arg_int;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_enable_level);<sp/><sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_byte_set_ks0108_cs(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>arg)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>arg&amp;1);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>arg<sp/>=<sp/>arg<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_CS1,<sp/>arg&amp;1);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>arg<sp/>=<sp/>arg<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_CS2,<sp/>arg&amp;1);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>6800<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">uint8_t<sp/>u8x8_byte_ks0108(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>b;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>U8X8_MSG_GPIO_D0;<sp/>i<sp/>&lt;=<sp/>U8X8_MSG_GPIO_D7;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>i,<sp/>b&amp;1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;data_setup_time_ns);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>1);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;write_pulse_width_ns);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>chipselect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>that<sp/>the<sp/>enable<sp/>signal<sp/>is<sp/>low<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetDC(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>expects<sp/>3<sp/>bits<sp/>in<sp/>arg_int<sp/>for<sp/>the<sp/>chip<sp/>select<sp/>lines<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_byte_set_ks0108_cs(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;gpio_and_delay_cb(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns,<sp/>NULL);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_byte_set_ks0108_cs(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>sed1520<sp/>or<sp/>sbn1661<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>U8X8_MSG_GPIO_E<sp/>--&gt;<sp/>E1</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/>U8X8_MSG_GPIO_CS<sp/>--&gt;<sp/>E2</highlight></codeline>
<codeline lineno="396"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">uint8_t<sp/>u8x8_byte_sed1520(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>b;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>enable_pin;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>U8X8_MSG_GPIO_D0;<sp/>i<sp/>&lt;=<sp/>U8X8_MSG_GPIO_D7;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>i,<sp/>b&amp;1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;data_setup_time_ns);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>enable_pin,<sp/>1);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>200);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>KS0108<sp/>requires<sp/>450<sp/>ns,<sp/>use<sp/>200<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_NANO,<sp/>u8x8-&gt;display_info-&gt;write_pulse_width_ns);<sp/><sp/></highlight><highlight class="comment">/*<sp/>expect<sp/>250<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>enable_pin,<sp/>0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>chipselect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetCS(u8x8,<sp/>u8x8-&gt;display_info-&gt;chip_disable_level);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>that<sp/>the<sp/>enable<sp/>signals<sp/>are<sp/>low<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_E,<sp/>0);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_call(u8x8,<sp/>U8X8_MSG_GPIO_CS,<sp/>0);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enable_pin<sp/>=<sp/>U8X8_MSG_GPIO_E;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_gpio_SetDC(u8x8,<sp/>arg_int);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cs<sp/>lines<sp/>are<sp/>not<sp/>supported<sp/>for<sp/>the<sp/>SED1520/SBN1661<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>instead,<sp/>this<sp/>will<sp/>select<sp/>the<sp/>E1<sp/>or<sp/>E2<sp/>line<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>arg_int<sp/>is<sp/>set<sp/>by<sp/>u8x8_d_sbn1661_122x32()<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enable_pin<sp/>=<sp/>U8X8_MSG_GPIO_E;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>arg_int<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_pin<sp/>=<sp/>U8X8_MSG_GPIO_CS;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>software<sp/>i2c,</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/>ignores<sp/>ACK<sp/>response<sp/>(which<sp/>is<sp/>anyway<sp/>not<sp/>provided<sp/>by<sp/>some<sp/>displays)</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>also<sp/>does<sp/>not<sp/>allow<sp/>reading<sp/>from<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="460"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_delay(u8x8_t<sp/>*u8x8)<sp/>U8X8_NOINLINE;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_delay(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_10MICRO,<sp/>u8x8-&gt;display_info-&gt;i2c_bus_clock_100kHz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>u8x8_gpio_Delay(u8x8,<sp/>U8X8_MSG_DELAY_I2C,<sp/>u8x8-&gt;display_info-&gt;i2c_bus_clock_100kHz);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_init(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetI2CClock(u8x8,<sp/>1);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetI2CData(u8x8,<sp/>1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>actually,<sp/>the<sp/>scl<sp/>line<sp/>is<sp/>not<sp/>observed,<sp/>so<sp/>this<sp/>procedure<sp/>does<sp/>not<sp/>return<sp/>a<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_read_scl_and_delay(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>as<sp/>input<sp/>(line<sp/>will<sp/>be<sp/>high)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetI2CClock(u8x8,<sp/>1);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_clear_scl(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetI2CClock(u8x8,<sp/>0);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_read_sda(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>as<sp/>input<sp/>(line<sp/>will<sp/>be<sp/>high)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetI2CData(u8x8,<sp/>1);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_clear_sda(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>open<sp/>collector<sp/>and<sp/>drive<sp/>low<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>u8x8_gpio_SetI2CData(u8x8,<sp/>0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_start(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u8x8-&gt;i2c_started<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>already<sp/>started:<sp/>do<sp/>restart<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_read_sda(u8x8);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SDA<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_read_scl_and_delay(u8x8);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>i2c_read_sda(u8x8);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>the<sp/>start<sp/>condition,<sp/>both<sp/>lines<sp/>go<sp/>from<sp/>1<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>i2c_clear_sda(u8x8);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>i2c_clear_scl(u8x8);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>u8x8-&gt;i2c_started<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_stop(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>SDA<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>i2c_clear_sda(u8x8);<sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>release<sp/>all<sp/>lines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>i2c_read_scl_and_delay(u8x8);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>SDA<sp/>to<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>i2c_read_sda(u8x8);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>u8x8-&gt;i2c_started<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_write_bit(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>val)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_read_sda(u8x8);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_clear_sda(u8x8);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>i2c_read_scl_and_delay(u8x8);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>i2c_clear_scl(u8x8);</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_read_bit(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>val;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>not<sp/>drive<sp/>SDA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>i2c_read_sda(u8x8);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>i2c_read_scl_and_delay(u8x8);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>i2c_read_sda(u8x8);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>i2c_delay(u8x8);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>i2c_clear_scl(u8x8);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>val;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_write_byte(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>b)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>128);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>64);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>32);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>16);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>8);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>4);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>2);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>i2c_write_bit(u8x8,<sp/>b<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>ack<sp/>from<sp/>client<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>0:<sp/>ack<sp/>was<sp/>given<sp/>by<sp/>client<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1:<sp/>nothing<sp/>happend<sp/>during<sp/>ack<sp/>cycle<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>i2c_read_bit(u8x8);</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">uint8_t<sp/>u8x8_byte_sw_i2c(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_write_byte(u8x8,<sp/>*data);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c_init(u8x8);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c_start(u8x8);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c_write_byte(u8x8,<sp/>u8x8_GetI2CAddress(u8x8));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//i2c_write_byte(u8x8,<sp/>0x078);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c_stop(u8x8);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">/*=========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>alternative<sp/>i2c<sp/>byte<sp/>procedure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ALTERNATIVE_I2C_BYTE_PROCEDURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_transfer(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>adr,<sp/>uint8_t<sp/>cnt,<sp/>uint8_t<sp/>*data)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>i2c_start(u8x8);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>i2c_write_byte(u8x8,<sp/>adr);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_write_byte(u8x8,<sp/>data[i]);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>i2c_stop(u8x8);<sp/><sp/></highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">uint8_t<sp/>u8x8_byte_sw_i2c(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>buffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>u8g2/u8x8<sp/>will<sp/>never<sp/>send<sp/>more<sp/>than<sp/>32<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>buf_idx;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*data;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(msg)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SEND:</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(uint8_t<sp/>*)arg_ptr;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[buf_idx++]<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_INIT:</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c_init(u8x8);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>i2c<sp/>communication<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_SET_DC:</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ignored<sp/>for<sp/>i2c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_START_TRANSFER:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>U8X8_MSG_BYTE_END_TRANSFER:</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c_transfer(u8x8,<sp/>u8x8_GetI2CAddress(u8x8),<sp/>buf_idx,<sp/>buffer);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/helper/U8g2/clib/u8x8_byte.c"/>
  </compounddef>
</doxygen>
