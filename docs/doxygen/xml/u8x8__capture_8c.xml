<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="u8x8__capture_8c" kind="file" language="C++">
    <compoundname>u8x8_capture.c</compoundname>
    <includes refid="u8x8_8h" local="yes">u8x8.h</includes>
    <incdepgraph>
      <node id="2">
        <label>u8x8.h</label>
        <link refid="u8x8_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/helper/U8g2/clib/u8x8_capture.c</label>
        <link refid="u8x8__capture_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="u8x8__capture_8c_1a039c848794814cd046f9f8b0cc42115c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_capture_get_pixel_1</definition>
        <argsstring>(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width)</argsstring>
        <name>u8x8_capture_get_pixel_1</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dest_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_capture.c" line="45" column="9" bodyfile="src/helper/U8g2/clib/u8x8_capture.c" bodystart="45" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__capture_8c_1ab9ecf78f924459111138a9707bdb39fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_capture_get_pixel_2</definition>
        <argsstring>(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width)</argsstring>
        <name>u8x8_capture_get_pixel_2</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dest_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_capture.c" line="61" column="9" bodyfile="src/helper/U8g2/clib/u8x8_capture.c" bodystart="61" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__capture_8c_1a5ad11e588f7db9236faa4d21df14453e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_capture_write_pbm_pre</definition>
        <argsstring>(uint8_t tile_width, uint8_t tile_height, void(*out)(const char *s))</argsstring>
        <name>u8x8_capture_write_pbm_pre</name>
        <param>
          <type>uint8_t</type>
          <declname>tile_width</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_height</declname>
        </param>
        <param>
          <type>void(*)(const char *s)</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_capture.c" line="75" column="6" bodyfile="src/helper/U8g2/clib/u8x8_capture.c" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__capture_8c_1a02b86b617850e2593c72c25d8da53c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_capture_write_pbm_buffer</definition>
        <argsstring>(uint8_t *buffer, uint8_t tile_width, uint8_t tile_height, uint8_t(*get_pixel)(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width), void(*out)(const char *s))</argsstring>
        <name>u8x8_capture_write_pbm_buffer</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_width</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_height</declname>
        </param>
        <param>
          <type>uint8_t(*)(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width)</type>
          <declname>get_pixel</declname>
        </param>
        <param>
          <type>void(*)(const char *s)</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_capture.c" line="85" column="6" bodyfile="src/helper/U8g2/clib/u8x8_capture.c" bodystart="85" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__capture_8c_1adb48a911bae9d3896371ff03f7cf02ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_capture_write_xbm_pre</definition>
        <argsstring>(uint8_t tile_width, uint8_t tile_height, void(*out)(const char *s))</argsstring>
        <name>u8x8_capture_write_xbm_pre</name>
        <param>
          <type>uint8_t</type>
          <declname>tile_width</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_height</declname>
        </param>
        <param>
          <type>void(*)(const char *s)</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_capture.c" line="111" column="6" bodyfile="src/helper/U8g2/clib/u8x8_capture.c" bodystart="111" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__capture_8c_1a462aa3fb6e6cff3cd5d092b338a24bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_capture_write_xbm_buffer</definition>
        <argsstring>(uint8_t *buffer, uint8_t tile_width, uint8_t tile_height, uint8_t(*get_pixel)(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width), void(*out)(const char *s))</argsstring>
        <name>u8x8_capture_write_xbm_buffer</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_width</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_height</declname>
        </param>
        <param>
          <type>uint8_t(*)(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width)</type>
          <declname>get_pixel</declname>
        </param>
        <param>
          <type>void(*)(const char *s)</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_capture.c" line="122" column="6" bodyfile="src/helper/U8g2/clib/u8x8_capture.c" bodystart="122" bodyend="174"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>u8x8_capture.c</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Screen<sp/>capture<sp/>funcion</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Universal<sp/>8bit<sp/>Graphics<sp/>Library<sp/>(https://github.com/olikraus/u8g2/)</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>olikraus@gmail.com</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.<sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;u8x8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*========================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>vertical<sp/>top<sp/>lsb<sp/>memory<sp/>architecture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">uint8_t<sp/>u8x8_capture_get_pixel_1(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint8_t<sp/>*dest_ptr,<sp/>uint8_t<sp/>tile_width)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>*dest_ptr<sp/>=<sp/>capture-&gt;buffer;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(<sp/>dest_ptr<sp/>==<sp/>NULL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dest_ptr<sp/>+=<sp/>(y/8)*capture-&gt;tile_width*8;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>dest_ptr<sp/>+=<sp/>(y/8)*tile_width*8;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>y<sp/>&amp;=<sp/>7;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>dest_ptr<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*dest_ptr<sp/>&amp;<sp/>(1&lt;&lt;y))<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>horizontal<sp/>right<sp/>lsb<sp/>memory<sp/>architecture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SH1122,<sp/>LD7032,<sp/>ST7920,<sp/>ST7986,<sp/>LC7981,<sp/>T6963,<sp/>SED1330,<sp/>RA8835,<sp/>MAX7219,<sp/>LS0<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal">uint8_t<sp/>u8x8_capture_get_pixel_2(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint8_t<sp/>*dest_ptr,<sp/>uint8_t<sp/>tile_width)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>*dest_ptr<sp/>=<sp/>capture-&gt;buffer;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(<sp/>dest_ptr<sp/>==<sp/>NULL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>return<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dest_ptr<sp/>+=<sp/>y*capture-&gt;tile_width;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>y<sp/>*=<sp/>tile_width;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>dest_ptr<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>dest_ptr<sp/>+=<sp/>x&gt;&gt;3;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*dest_ptr<sp/>&amp;<sp/>(128&gt;&gt;(x&amp;7)))<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_capture_write_pbm_pre(uint8_t<sp/>tile_width,<sp/>uint8_t<sp/>tile_height,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*out)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s))</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;P1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>out(u8x8_utoa((uint16_t)tile_width*8));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>out(u8x8_utoa((uint16_t)tile_height*8));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_capture_write_pbm_buffer(uint8_t<sp/>*buffer,<sp/>uint8_t<sp/>tile_width,<sp/>uint8_t<sp/>tile_height,<sp/>uint8_t<sp/>(*get_pixel)(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint8_t<sp/>*dest_ptr,<sp/>uint8_t<sp/>tile_width),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*out)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s))</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>uint16_t<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>uint16_t<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>tile_width;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>w<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>tile_height;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>h<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>y++)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>x++)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_pixel(x,<sp/>y,<sp/>buffer,<sp/>tile_width)<sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_capture_write_xbm_pre(uint8_t<sp/>tile_width,<sp/>uint8_t<sp/>tile_height,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*out)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s))</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;#define<sp/>xbm_width<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>out(u8x8_utoa((uint16_t)tile_width*8));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;#define<sp/>xbm_height<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>out(u8x8_utoa((uint16_t)tile_height*8));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;static<sp/>unsigned<sp/>char<sp/>xbm_bits[]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_capture_write_xbm_buffer(uint8_t<sp/>*buffer,<sp/>uint8_t<sp/>tile_width,<sp/>uint8_t<sp/>tile_height,<sp/>uint8_t<sp/>(*get_pixel)(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint8_t<sp/>*dest_ptr,<sp/>uint8_t<sp/>tile_width),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*out)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s))</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>uint16_t<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>uint16_t<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>uint8_t<sp/>v,<sp/>b;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[2];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>s[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>tile_width;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>w<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>tile_height;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>h<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>8;<sp/>b++<sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_pixel(x+7-b,<sp/>y,<sp/>buffer,<sp/>tile_width)<sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>|=<sp/>1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[0]<sp/>=<sp/>(v&gt;&gt;4);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s[0]<sp/>&lt;=<sp/>9<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>s[0]<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>s[0]<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">-10;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out(s);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[0]<sp/>=<sp/>(v&amp;15);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s[0]<sp/>&lt;=<sp/>9<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>s[0]<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>s[0]<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">-10;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out(s);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>&gt;=<sp/>w<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>&gt;=<sp/>h<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>out(</highlight><highlight class="stringliteral">&quot;};\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">/*========================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOT_YET_IMPLEMENTED_U8X8_SCREEN_CAPTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_u8x8_capture_struct</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>u8x8_msg_cb<sp/>old_cb;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*buffer;<sp/><sp/></highlight><highlight class="comment">/*<sp/>tile_width*tile_height*8<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tile_width;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tile_height;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_u8x8_capture_struct<sp/>u8x8_capture_t;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">u8x8_capture_t<sp/>u8x8_capture;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_capture_memory_copy(uint8_t<sp/>*dest,<sp/>uint8_t<sp/>*src,<sp/>uint16_t<sp/>cnt)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>cnt<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>*src++;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt--;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_capture_DrawTiles(u8x8_capture_t<sp/>*capture,<sp/>uint8_t<sp/>tx,<sp/>uint8_t<sp/>ty,<sp/>uint8_t<sp/>tile_cnt,<sp/>uint8_t<sp/>*tile_ptr)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*dest_ptr<sp/>=<sp/>capture-&gt;buffer;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;tile<sp/>pos:<sp/>%d<sp/>%d,<sp/>cnt=%d\n&quot;,<sp/>tx,<sp/>ty,<sp/>tile_cnt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dest_ptr<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>dest_ptr<sp/>+=<sp/>(uint16_t)ty*capture-&gt;tile_width*8;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>dest_ptr<sp/>+=<sp/>(uint16_t)tx*8;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>u8x8_capture_memory_copy(dest_ptr,<sp/>tile_ptr,<sp/>tile_cnt*8);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">uint8_t<sp/>u8x8_d_capture(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>msg,<sp/>uint8_t<sp/>arg_int,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg_ptr)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>msg<sp/>==<sp/><sp/>U8X8_MSG_DISPLAY_DRAW_TILE<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>x,<sp/>y,<sp/>c;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*ptr;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((u8x8_tile_t<sp/>*)arg_ptr)-&gt;x_pos;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>((u8x8_tile_t<sp/>*)arg_ptr)-&gt;y_pos;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>((u8x8_tile_t<sp/>*)arg_ptr)-&gt;cnt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>((u8x8_tile_t<sp/>*)arg_ptr)-&gt;tile_ptr;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_capture_DrawTiles(&amp;u8x8_capture,<sp/>x,<sp/>y,<sp/>c,<sp/>ptr);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_int--;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>arg_int<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_capture.old_cb(u8x8,<sp/>msg,<sp/>arg_int,<sp/>arg_ptr);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">uint8_t<sp/>u8x8_GetCaptureMemoryPixel(u8x8_t<sp/>*u8x8,<sp/>uint16_t<sp/>x,<sp/>uint16_t<sp/>y)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_capture_GetPixel(&amp;u8x8_capture,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>memory:<sp/>tile_width*tile_height*8<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_ConnectCapture(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>tile_width,<sp/>uint8_t<sp/>tile_height,<sp/>uint8_t<sp/>*memory)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u8x8-&gt;display_cb<sp/>==<sp/>u8x8_d_capture<sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing,<sp/>capture<sp/>already<sp/>installed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>u8x8_capture.buffer<sp/>=<sp/>memory;<sp/></highlight><highlight class="comment">/*<sp/>tile_width*tile_height*8<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>u8x8_capture.tile_width<sp/>=<sp/>tile_width;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>u8x8_capture.tile_height<sp/>=<sp/>tile_height;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>u8x8_capture.old_cb<sp/>=<sp/>u8x8-&gt;display_cb;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>u8x8-&gt;display_cb<sp/>=<sp/>u8x8_d_capture;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/helper/U8g2/clib/u8x8_capture.c"/>
  </compounddef>
</doxygen>
