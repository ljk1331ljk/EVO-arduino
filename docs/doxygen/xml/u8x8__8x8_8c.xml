<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="u8x8__8x8_8c" kind="file" language="C++">
    <compoundname>u8x8_8x8.c</compoundname>
    <includes refid="u8x8_8h" local="yes">u8x8.h</includes>
    <incdepgraph>
      <node id="2">
        <label>u8x8.h</label>
        <link refid="u8x8_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/helper/U8g2/clib/u8x8_8x8.c</label>
        <link refid="u8x8__8x8_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="u8x8__8x8_8c_1ad6e673bc93c1a7a30574b930b00e8392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_SetFont</definition>
        <argsstring>(u8x8_t *u8x8, const uint8_t *font_8x8)</argsstring>
        <name>u8x8_SetFont</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>font_8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="50" column="6" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a690b5560d2e4fd3c301d06ef27adc606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_get_glyph_data</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf, uint8_t tile_offset) U8X8_NOINLINE</argsstring>
        <name>u8x8_get_glyph_data</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="62" column="6" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="62" bodyend="103" declfile="src/helper/U8g2/clib/u8x8_8x8.c" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1af77ede00c2f71d3b2be6fae5bea34f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_DrawGlyph</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)</argsstring>
        <name>u8x8_DrawGlyph</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="105" column="6" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="105" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a74d10a617b9834b1b1eff8d4a0279339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t u8x8_upscale_byte</definition>
        <argsstring>(uint8_t x)</argsstring>
        <name>u8x8_upscale_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="153" column="10" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="153" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a6ac6d5dc1f3d436fdafe99acdbe962f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void u8x8_upscale_buf</definition>
        <argsstring>(uint8_t *src, uint8_t *dest) U8X8_NOINLINE</argsstring>
        <name>u8x8_upscale_buf</name>
        <param>
          <type>uint8_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="168" column="13" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="168" bodyend="177" declfile="src/helper/U8g2/clib/u8x8_8x8.c" declline="167" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a135b7a0c2b4fba4f5d6f47d2077815fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void u8x8_draw_2x2_subglyph</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding, uint8_t tile)</argsstring>
        <name>u8x8_draw_2x2_subglyph</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="179" column="13" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="179" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1ab8c127881e10d01589dc7db259a5d845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_Draw2x2Glyph</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)</argsstring>
        <name>u8x8_Draw2x2Glyph</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="207" column="6" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="207" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a16280cbbd5bd9a1b9bab792d72fe395b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void u8x8_draw_1x2_subglyph</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding, uint8_t tile)</argsstring>
        <name>u8x8_draw_1x2_subglyph</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="231" column="13" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="231" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1ace65c2396c3e36fd2705a5dde080a0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_Draw1x2Glyph</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)</argsstring>
        <name>u8x8_Draw1x2Glyph</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="249" column="6" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="249" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a9f58fa7f7fd849a3c7684cad7183d0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void u8x8_utf8_init</definition>
        <argsstring>(u8x8_t *u8x8)</argsstring>
        <name>u8x8_utf8_init</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="285" column="6" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a6c094223f1336978208c94ded882fc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t u8x8_ascii_next</definition>
        <argsstring>(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)</argsstring>
        <name>u8x8_ascii_next</name>
        <param>
          <type>U8X8_UNUSED <ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="290" column="10" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a5f8c579a32e4b0bff96d5e95d231cff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t u8x8_utf8_next</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t b)</argsstring>
        <name>u8x8_utf8_next</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="304" column="10" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="304" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a17415556af3a0d6d5ff6974dc7c080f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t u8x8_draw_string</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE</argsstring>
        <name>u8x8_draw_string</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="359" column="16" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="359" bodyend="380" declfile="src/helper/U8g2/clib/u8x8_8x8.c" declline="358" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a9a68e0806ab88dabe9ce0d4f8ee83da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_DrawString</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)</argsstring>
        <name>u8x8_DrawString</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="383" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="383" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a718be7c2e7a72557e7c4a3a7ff0bb283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_DrawUTF8</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)</argsstring>
        <name>u8x8_DrawUTF8</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="389" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a4b27597b254eaad13f798baacee525f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t u8x8_draw_2x2_string</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE</argsstring>
        <name>u8x8_draw_2x2_string</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="398" column="16" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="398" bodyend="421" declfile="src/helper/U8g2/clib/u8x8_8x8.c" declline="397" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1aabe93aa99c7c502b8be388ea2262fb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_Draw2x2String</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)</argsstring>
        <name>u8x8_Draw2x2String</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="424" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a8b200db5613c5f0616d74951a7c9a7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_Draw2x2UTF8</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)</argsstring>
        <name>u8x8_Draw2x2UTF8</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="430" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="430" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a645b7db958ab1ff1ca299516b3270400" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t u8x8_draw_1x2_string</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE</argsstring>
        <name>u8x8_draw_1x2_string</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="439" column="16" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="439" bodyend="459" declfile="src/helper/U8g2/clib/u8x8_8x8.c" declline="438" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1aab90e0fd655bf8cac196eb6db29c5155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_Draw1x2String</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)</argsstring>
        <name>u8x8_Draw1x2String</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="462" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a075c29b9f8841f9334f4b0900072c9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_Draw1x2UTF8</definition>
        <argsstring>(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)</argsstring>
        <name>u8x8_Draw1x2UTF8</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="468" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="468" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="u8x8__8x8_8c_1a6db987822efe3ece936a509e907f5ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t u8x8_GetUTF8Len</definition>
        <argsstring>(u8x8_t *u8x8, const char *s)</argsstring>
        <name>u8x8_GetUTF8Len</name>
        <param>
          <type><ref refid="structu8x8__struct" kindref="compound">u8x8_t</ref> *</type>
          <declname>u8x8</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/helper/U8g2/clib/u8x8_8x8.c" line="476" column="9" bodyfile="src/helper/U8g2/clib/u8x8_8x8.c" bodystart="476" bodyend="491"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>u8x8_8x8.c</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>font<sp/>procedures,<sp/>directly<sp/>interfaces<sp/>display<sp/>procedures</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Universal<sp/>8bit<sp/>Graphics<sp/>Library<sp/>(https://github.com/olikraus/u8g2/)</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>olikraus@gmail.com</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;u8x8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ESP8266)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">uint8_t<sp/>u8x8_pgm_read_esp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>addr)<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bytes;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes<sp/>=<sp/>*(uint32_t*)((uint32_t)addr<sp/>&amp;<sp/>~3);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint8_t*)&amp;bytes)[(uint32_t)addr<sp/>&amp;<sp/>3];</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_SetFont(u8x8_t<sp/>*u8x8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*font_8x8)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>u8x8-&gt;font<sp/>=<sp/>font_8x8;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>Args:</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>u8x8:<sp/>ptr<sp/>to<sp/>u8x8<sp/>structure</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/>encoding:<sp/>glyph<sp/>for<sp/>which<sp/>the<sp/>data<sp/>is<sp/>requested<sp/>(must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>255)</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/>buf:<sp/>pointer<sp/>to<sp/>8<sp/>bytes</highlight></codeline>
<codeline lineno="60"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_get_glyph_data(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>encoding,<sp/>uint8_t<sp/>*buf,<sp/>uint8_t<sp/>tile_offset)<sp/>U8X8_NOINLINE;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_get_glyph_data(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>encoding,<sp/>uint8_t<sp/>*buf,<sp/>uint8_t<sp/>tile_offset)<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>uint8_t<sp/>first,<sp/>last,<sp/>tiles,<sp/>i;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>uint16_t<sp/>offset;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>first<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>last<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>tiles<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>tiles<sp/>*=<sp/>u8x8_pgm_read(u8x8-&gt;font+3);<sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>glyph<sp/>bitmap<sp/>from<sp/>the<sp/>font<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>first<sp/>&lt;=<sp/>encoding<sp/>&amp;&amp;<sp/>encoding<sp/>&lt;=<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>encoding;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>-=<sp/>first;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>tiles;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>tile_offset;<sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>+=4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>changed<sp/>from<sp/>2<sp/>to<sp/>4,<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+offset);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset++;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>invert<sp/>the<sp/>bitmap<sp/>if<sp/>required<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u8x8-&gt;is_font_inverse_mode<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>^=<sp/>255;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_DrawGlyph(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/>uint8_t<sp/>encoding)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>uint8_t<sp/>th<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tv<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+3);<sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>uint8_t<sp/>xx,<sp/>tile;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf[8];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>th<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>tv<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>tile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_get_glyph_data(u8x8,<sp/>encoding,<sp/>buf,<sp/>tile);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>xx,<sp/>y,<sp/>1,<sp/>buf);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tile++;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx++;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>xx<sp/>&lt;<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>y<sp/>&lt;<sp/>tv<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>Source:<sp/>http://graphics.stanford.edu/~seander/bithacks.html</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/>Section:<sp/>Interleave<sp/>bits<sp/>by<sp/>Binary<sp/>Magic<sp/>Numbers<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>Original<sp/>codes<sp/>is<sp/>here:</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>unsigned<sp/>int<sp/>B[]<sp/>=<sp/>{0x55555555,<sp/>0x33333333,<sp/>0x0F0F0F0F,<sp/>0x00FF00FF};</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>unsigned<sp/>int<sp/>S[]<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8};</highlight></codeline>
<codeline lineno="135"><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>x;<sp/>//<sp/>Interleave<sp/>lower<sp/>16<sp/>bits<sp/>of<sp/>x<sp/>and<sp/>y,<sp/>so<sp/>the<sp/>bits<sp/>of<sp/>x</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>y;<sp/>//<sp/>are<sp/>in<sp/>the<sp/>even<sp/>positions<sp/>and<sp/>bits<sp/>from<sp/>y<sp/>in<sp/>the<sp/>odd;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>z;<sp/>//<sp/>z<sp/>gets<sp/>the<sp/>resulting<sp/>32-bit<sp/>Morton<sp/>Number.<sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>x<sp/>and<sp/>y<sp/>must<sp/>initially<sp/>be<sp/>less<sp/>than<sp/>65536.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[3]))<sp/>&amp;<sp/>B[3];</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[2]))<sp/>&amp;<sp/>B[2];</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[1]))<sp/>&amp;<sp/>B[1];</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[0]))<sp/>&amp;<sp/>B[0];</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(y<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>S[3]))<sp/>&amp;<sp/>B[3];</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(y<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>S[2]))<sp/>&amp;<sp/>B[2];</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(y<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>S[1]))<sp/>&amp;<sp/>B[1];</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(y<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>S[0]))<sp/>&amp;<sp/>B[0];</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>x<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="152"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">uint16_t<sp/>u8x8_upscale_byte(uint8_t<sp/>x)<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>y<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>|=<sp/>(y<sp/>&lt;&lt;<sp/>4);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[2]))<sp/>&amp;<sp/>B[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>&amp;=<sp/>0x0f0f;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>|=<sp/>(y<sp/>&lt;&lt;<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[1]))<sp/>&amp;<sp/>B[1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>&amp;=<sp/>0x3333;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>|=<sp/>(y<sp/>&lt;&lt;<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>(x<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>S[0]))<sp/>&amp;<sp/>B[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>&amp;=<sp/>0x5555;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>|=<sp/>(y<sp/>&lt;&lt;<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>x<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_upscale_buf(uint8_t<sp/>*src,<sp/>uint8_t<sp/>*dest)<sp/>U8X8_NOINLINE;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_upscale_buf(uint8_t<sp/>*src,<sp/>uint8_t<sp/>*dest)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i<sp/>=<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>*src++;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>i<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_draw_2x2_subglyph(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/>uint8_t<sp/>encoding,<sp/>uint8_t<sp/>tile)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>uint16_t<sp/>t;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf[8];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf1[8];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf2[8];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>u8x8_get_glyph_data(u8x8,<sp/>encoding,<sp/>buf,<sp/>tile);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i<sp/>++<sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>u8x8_upscale_byte(buf[i]);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf1[i]<sp/>=<sp/>t<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf2[i]<sp/>=<sp/>t<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>u8x8_upscale_buf(buf2,<sp/>buf);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>x,<sp/>y,<sp/>1,<sp/>buf);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>u8x8_upscale_buf(buf2+4,<sp/>buf);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>x+1,<sp/>y,<sp/>1,<sp/>buf);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>u8x8_upscale_buf(buf1,<sp/>buf);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>x,<sp/>y+1,<sp/>1,<sp/>buf);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>u8x8_upscale_buf(buf1+4,<sp/>buf);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>x+1,<sp/>y+1,<sp/>1,<sp/>buf);<sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_Draw2x2Glyph(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/>uint8_t<sp/>encoding)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>uint8_t<sp/>th<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tv<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+3);<sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>uint8_t<sp/>xx,<sp/>tile;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>th<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>th<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>tv<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>tv<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>tile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_draw_2x2_subglyph(u8x8,<sp/>xx,<sp/>y,<sp/>encoding,<sp/>tile);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tile++;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx+=2;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>xx<sp/>&lt;<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>y+=2;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>y<sp/>&lt;<sp/>tv<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>https://github.com/olikraus/u8g2/issues/474<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_draw_1x2_subglyph(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/>uint8_t<sp/>encoding,<sp/>uint8_t<sp/>tile)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>uint16_t<sp/>t;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf[8];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf1[8];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buf2[8];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>u8x8_get_glyph_data(u8x8,<sp/>encoding,<sp/>buf,<sp/>tile);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i<sp/>++<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>u8x8_upscale_byte(buf[i]);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf1[i]<sp/>=<sp/>t<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf2[i]<sp/>=<sp/>t<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>x,<sp/><sp/><sp/>y,<sp/>1,<sp/>buf2);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>u8x8_DrawTile(u8x8,<sp/>x,<sp/>y+1,<sp/>1,<sp/>buf1);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_Draw1x2Glyph(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/>uint8_t<sp/>encoding)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>uint8_t<sp/>th<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tv<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+3);<sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>uint8_t<sp/>xx,<sp/>tile;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>th<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>tv<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>tv<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>tile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_draw_1x2_subglyph(u8x8,<sp/>xx,<sp/>y,<sp/>encoding,<sp/>tile);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tile++;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx++;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>xx<sp/>&lt;<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>y+=2;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>y<sp/>&lt;<sp/>tv<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="272"><highlight class="comment">source:<sp/>https://en.wikipedia.org/wiki/UTF-8</highlight></codeline>
<codeline lineno="273"><highlight class="comment">Bits<sp/><sp/><sp/><sp/>from<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/><sp/><sp/>Byte<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>3<sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>5<sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>6</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>7<sp/><sp/><sp/><sp/><sp/>U+0000<sp/><sp/><sp/><sp/><sp/><sp/>U+007F<sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xxxxxxx</highlight></codeline>
<codeline lineno="275"><highlight class="comment">11<sp/><sp/>U+0080<sp/><sp/><sp/><sp/><sp/><sp/>U+07FF<sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>110xxxxx<sp/><sp/><sp/><sp/>10xxxxxx</highlight></codeline>
<codeline lineno="276"><highlight class="comment">16<sp/><sp/>U+0800<sp/><sp/><sp/><sp/><sp/><sp/>U+FFFF<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1110xxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx</highlight></codeline>
<codeline lineno="277"><highlight class="comment">21<sp/><sp/>U+10000<sp/><sp/><sp/><sp/><sp/>U+1FFFFF<sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/>11110xxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx</highlight></codeline>
<codeline lineno="278"><highlight class="comment">26<sp/><sp/>U+200000<sp/><sp/><sp/><sp/>U+3FFFFFF<sp/><sp/><sp/>5<sp/><sp/><sp/><sp/><sp/><sp/><sp/>111110xx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx</highlight></codeline>
<codeline lineno="279"><highlight class="comment">31<sp/><sp/>U+4000000<sp/><sp/><sp/>U+7FFFFFFF<sp/><sp/>6<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1111110x<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/><sp/><sp/>10xxxxxx<sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>reset<sp/>the<sp/>internal<sp/>state<sp/>machine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>u8x8_utf8_init(u8x8_t<sp/>*u8x8)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>u8x8-&gt;utf8_state<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>also<sp/>reset<sp/>during<sp/>u8x8_SetupDefaults()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">uint16_t<sp/>u8x8_ascii_next(U8X8_UNUSED<sp/>u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>b)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>==<sp/>0<sp/>||<sp/>b<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="comment">/*<sp/>&apos;\n&apos;<sp/>terminates<sp/>the<sp/>string<sp/>to<sp/>support<sp/>the<sp/>string<sp/>list<sp/>procedures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x0ffff;<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>string<sp/>detected*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/>pass<sp/>a<sp/>byte<sp/>from<sp/>an<sp/>utf8<sp/>encoded<sp/>string<sp/>to<sp/>the<sp/>utf8<sp/>decoder<sp/>state<sp/>machine</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/>returns<sp/></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/>0x0fffe:<sp/>no<sp/>glyph,<sp/>just<sp/>continue</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>0x0ffff:<sp/>end<sp/>of<sp/>string</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>anything<sp/>else:<sp/>The<sp/>decoded<sp/>encoding</highlight></codeline>
<codeline lineno="303"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">uint16_t<sp/>u8x8_utf8_next(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>b)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>==<sp/>0<sp/>||<sp/>b<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;\n&apos;<sp/>terminates<sp/>the<sp/>string<sp/>to<sp/>support<sp/>the<sp/>string<sp/>list<sp/>procedures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x0ffff;<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>string<sp/>detected,<sp/>pending<sp/>UTF8<sp/>is<sp/>discarded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u8x8-&gt;utf8_state<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>0xfc<sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>6<sp/>byte<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;utf8_state<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>0xf8<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;utf8_state<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>3;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>0xf0<sp/>)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;utf8_state<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>7;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>0xe0<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;utf8_state<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&gt;=<sp/>0xc0<sp/>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8-&gt;utf8_state<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>0x01f;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>nothing,<sp/>just<sp/>use<sp/>the<sp/>value<sp/>as<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8-&gt;encoding<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x0fffe;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8-&gt;utf8_state--;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>case<sp/>b<sp/>&lt;<sp/>0x080<sp/>(an<sp/>illegal<sp/>UTF8<sp/>encoding)<sp/>is<sp/>not<sp/>checked<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8-&gt;encoding&lt;&lt;=6;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>0x03f;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>u8x8-&gt;encoding<sp/>|=<sp/>b;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u8x8-&gt;utf8_state<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x0fffe;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8-&gt;encoding;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8x8_draw_string(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>U8X8_NOINLINE;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8x8_draw_string(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>uint16_t<sp/>e;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>uint8_t<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>uint8_t<sp/>th<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>u8x8_utf8_init(u8x8);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>u8x8-&gt;next_cb(u8x8,<sp/>(uint8_t)*s);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>==<sp/>0x0ffff<sp/>)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>s++;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>!=<sp/>0x0fffe<sp/>)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_DrawGlyph(u8x8,<sp/>x,<sp/>y,<sp/>e);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x+=th;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">uint8_t<sp/>u8x8_DrawString(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>u8x8-&gt;next_cb<sp/>=<sp/>u8x8_ascii_next;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_draw_string(u8x8,<sp/>x,<sp/>y,<sp/>s);</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">uint8_t<sp/>u8x8_DrawUTF8(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>u8x8-&gt;next_cb<sp/>=<sp/>u8x8_utf8_next;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_draw_string(u8x8,<sp/>x,<sp/>y,<sp/>s);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8x8_draw_2x2_string(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>U8X8_NOINLINE;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8x8_draw_2x2_string(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>uint16_t<sp/>e;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>uint8_t<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>uint8_t<sp/>th<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>th<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>u8x8_utf8_init(u8x8);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>u8x8-&gt;next_cb(u8x8,<sp/>(uint8_t)*s);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>==<sp/>0x0ffff<sp/>)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>s++;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>!=<sp/>0x0fffe<sp/>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_Draw2x2Glyph(u8x8,<sp/>x,<sp/>y,<sp/>e);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x+=th;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">uint8_t<sp/>u8x8_Draw2x2String(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>u8x8-&gt;next_cb<sp/>=<sp/>u8x8_ascii_next;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_draw_2x2_string(u8x8,<sp/>x,<sp/>y,<sp/>s);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">uint8_t<sp/>u8x8_Draw2x2UTF8(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>u8x8-&gt;next_cb<sp/>=<sp/>u8x8_utf8_next;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_draw_2x2_string(u8x8,<sp/>x,<sp/>y,<sp/>s);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8x8_draw_1x2_string(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>U8X8_NOINLINE;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8x8_draw_1x2_string(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>uint16_t<sp/>e;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>uint8_t<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>uint8_t<sp/>th<sp/>=<sp/>u8x8_pgm_read(u8x8-&gt;font+2);<sp/></highlight><highlight class="comment">/*<sp/>new<sp/>2019<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>u8x8_utf8_init(u8x8);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>u8x8-&gt;next_cb(u8x8,<sp/>(uint8_t)*s);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>==<sp/>0x0ffff<sp/>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>s++;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>!=<sp/>0x0fffe<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8x8_Draw1x2Glyph(u8x8,<sp/>x,<sp/>y,<sp/>e);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x+=th;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">uint8_t<sp/>u8x8_Draw1x2String(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>u8x8-&gt;next_cb<sp/>=<sp/>u8x8_ascii_next;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_draw_1x2_string(u8x8,<sp/>x,<sp/>y,<sp/>s);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">uint8_t<sp/>u8x8_Draw1x2UTF8(u8x8_t<sp/>*u8x8,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>u8x8-&gt;next_cb<sp/>=<sp/>u8x8_utf8_next;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u8x8_draw_1x2_string(u8x8,<sp/>x,<sp/>y,<sp/>s);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">uint8_t<sp/>u8x8_GetUTF8Len(u8x8_t<sp/>*u8x8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>uint16_t<sp/>e;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>uint8_t<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>u8x8_utf8_init(u8x8);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>u8x8_utf8_next(u8x8,<sp/>*s);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>==<sp/>0x0ffff<sp/>)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>s++;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>!=<sp/>0x0fffe<sp/>)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cnt++;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/helper/U8g2/clib/u8x8_8x8.c"/>
  </compounddef>
</doxygen>
